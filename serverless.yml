service: chat-app-aws
frameworkVersion: '3'
useDotenv: true
provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    USER_POOL_ID:
      Ref: UserPool
    USER_POOL_CLIENT_ID:
      Ref: UserPoolClient
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:BatchWriteItem
      Resource: 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/ChatConnections"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/ChatMessages"
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: 
        - "arn:aws:execute-api:${self:provider.region}:*:*/@connections/*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminListGroupsForUser
      Resource: !GetAtt UserPool.Arn


functions:
  connect:
    handler: ./src/functions/connections.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: ./src/functions/connections.disconnect
    events:
      - websocket:
          route: $disconnect
  sendMessage:
    handler: ./src/functions/messages.sendMessage
    events:
      - websocket:
          route: sendMessage
  deleteAllCommonMessages:
    handler: ./src/functions/messages.deleteAllCommonMessages
    events:
      - http:
          method: delete
          path: /messages/common
          cors: true
  register:
    handler: ./src/functions/auth.register
    events:
      - http:
          path: /register
          method: post
          cors: true

  confirmRegistration:
    handler: ./src/functions/auth.confirmRegistration
    events:
      - http:
          path: /confirmRegistration
          method: post
          cors: true

  login:
    handler: ./src/functions/auth.login
    events:
      - http:
          path: /login
          method: post
          cors: true 

  changePassword:
    handler: ./src/functions/auth.changePassword
    events:
      - http:
          path: /changePassword
          method: post
          cors: true 

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
          - AttributeDataType: String
            Name: name
            Required: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${sls:stage}
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt UserPool.Arn

    ChatConnections:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ChatConnections
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
    ChatTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ChatMessages
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      seed: true
      inMemory: true
      port: 8000